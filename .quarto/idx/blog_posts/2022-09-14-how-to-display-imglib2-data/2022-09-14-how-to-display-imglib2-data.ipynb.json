{"title":"How to display ImgLib2 data in a notebook","markdown":{"yaml":{"title":"How to display ImgLib2 data in a notebook","author":"Stephan Saalfeld","date":"2022-09-14","categories":["imglib2","jupyter","notebook"],"execute":{"echo":true}},"headingText":"How to display ImgLib2 data in a notebook?","containsRefs":false,"markdown":"\n> Render ImgLib2 data into notebook objects\n\n\n\nIn this notebook, we will explore how to store, process and visualize data with [ImgLib2](https://imglib2.net) in a notebook.\n\nFirst let's add the necessary dependencies.  We will use [ImageJ](https://imagej.nih.gov/ij/) to load example images and to generate [`RenderedImage`](https://docs.oracle.com/en/java/javase/17/docs/api/java.desktop/java/awt/image/RenderedImage.html) outputs that we can use to render in the notebook.  Then, we will import [ImgLib2](https://imglib2.net) and the modules to share data between ImgLib2 and ImageJ and the [`imglib2-realtransform` module](https://github.com/imglib/imglib2-realtransform) that includes various transformations.\n\nLet's open one of ImageJ's example images and show it in the notebook.  This uses [Spencer Park's image renderer](https://github.com/SpencerPark/jupyter-jvm-basekernel/blob/master/src/main/java/io/github/spencerpark/jupyter/kernel/display/common/Image.java):\n\nIf we want to work with this image in ImgLib2, we need to provide it as an ImgLib2 interface:\n\nThere is no default renderer for ImgLib2 interfaces available to the notebook kernel, so we see a default `String` representation of the result (when rendering this cell the first time).  So let's register some simple renderers that use [ImgLib2's ImageJ bridge](https://github.com/imglib/imglib2-ij/blob/master/src/main/java/net/imglib2/img/display/imagej/ImageJFunctions.java) and [Spencer Park's image renderer](https://github.com/SpencerPark/jupyter-jvm-basekernel/blob/master/src/main/java/io/github/spencerpark/jupyter/kernel/display/common/Image.java) to render ImgLib2 data into the notebook.  We add a version that renders the first 2D slice of a `RandomAccessibleInterval` and a second version that renders a default interval `512x512+0+0` of the 2D slice at position 0 in all other dimensions of an infinite `RandomAccessible`.\n\nNow let's try the same again:\n\nOk, great!  Let's try the 'infinite' version:\n\nWonderful!  We can of course still render a `String` representation or alternative encodings with the [injected `display` methods of the kernel]( https://github.com/SpencerPark/IJava/blob/master/docs/display.md):\n\nYou may have noticed that the output of this cell ends with an obscure identifier.  We see this, because we did not catch the output of the `display` method which provides an identifier for the output object that it generates.  This identifier can be used to update the contents of this object.  We can use this to render simple animations, e.g. to slice through a 3D volume.  Let's try this with a 3D volume from the ImageJ example images:\n\nOf course, you can only see the animation if you actually run the notebook cell.  In a future iteration, we are planning to implement an animated GIF generator for offline animations, but not this time.  Let's see what else we can do with these renderers.\n\nFirst, let's apply some transformations to images.  Already in the above border extension example as well as in the slicing animation, we have used ImgLib2's default behavior to apply transformations lazily, i.e. only when a 'pixel' is actually queried (e.g. to render it into a `RenderedImage` raster), the transformations are applied.  Transformations can be applied to both coordinates and values.  Lets apply some transformations to values:\n\nAnd now some integer coordinate transformations:\n\nWhile most trivial integer transformations such as flipping axes work on intervals, you probably noticed that we had to extend the image to infinity in order to shear it, so ImgLib2 can provide values for coordinates outside of the source interval.  For real coordinate transformations we will also need to interpolate values at non-integer coordinates.  Finally, in order to render the result, we have to read it from a raster.  Let's do this:\n\nAffine transformation are probably the most well known and simple real coordinate transformations, but there are many more.  Let's try a `ThinplateSplineTransform` and format text output with markdown:\n\n[![](https://img.shields.io/badge/Download%20-Python%20Notebook%20On%20Github-blue)](https://github.com/imglib/imglib2-www/tree/main/blog_posts/2022-09-14-how-to-display-imglib2-data)\n","srcMarkdownNoYaml":"\n# How to display ImgLib2 data in a notebook?\n> Render ImgLib2 data into notebook objects\n\n\n\nIn this notebook, we will explore how to store, process and visualize data with [ImgLib2](https://imglib2.net) in a notebook.\n\nFirst let's add the necessary dependencies.  We will use [ImageJ](https://imagej.nih.gov/ij/) to load example images and to generate [`RenderedImage`](https://docs.oracle.com/en/java/javase/17/docs/api/java.desktop/java/awt/image/RenderedImage.html) outputs that we can use to render in the notebook.  Then, we will import [ImgLib2](https://imglib2.net) and the modules to share data between ImgLib2 and ImageJ and the [`imglib2-realtransform` module](https://github.com/imglib/imglib2-realtransform) that includes various transformations.\n\nLet's open one of ImageJ's example images and show it in the notebook.  This uses [Spencer Park's image renderer](https://github.com/SpencerPark/jupyter-jvm-basekernel/blob/master/src/main/java/io/github/spencerpark/jupyter/kernel/display/common/Image.java):\n\nIf we want to work with this image in ImgLib2, we need to provide it as an ImgLib2 interface:\n\nThere is no default renderer for ImgLib2 interfaces available to the notebook kernel, so we see a default `String` representation of the result (when rendering this cell the first time).  So let's register some simple renderers that use [ImgLib2's ImageJ bridge](https://github.com/imglib/imglib2-ij/blob/master/src/main/java/net/imglib2/img/display/imagej/ImageJFunctions.java) and [Spencer Park's image renderer](https://github.com/SpencerPark/jupyter-jvm-basekernel/blob/master/src/main/java/io/github/spencerpark/jupyter/kernel/display/common/Image.java) to render ImgLib2 data into the notebook.  We add a version that renders the first 2D slice of a `RandomAccessibleInterval` and a second version that renders a default interval `512x512+0+0` of the 2D slice at position 0 in all other dimensions of an infinite `RandomAccessible`.\n\nNow let's try the same again:\n\nOk, great!  Let's try the 'infinite' version:\n\nWonderful!  We can of course still render a `String` representation or alternative encodings with the [injected `display` methods of the kernel]( https://github.com/SpencerPark/IJava/blob/master/docs/display.md):\n\nYou may have noticed that the output of this cell ends with an obscure identifier.  We see this, because we did not catch the output of the `display` method which provides an identifier for the output object that it generates.  This identifier can be used to update the contents of this object.  We can use this to render simple animations, e.g. to slice through a 3D volume.  Let's try this with a 3D volume from the ImageJ example images:\n\nOf course, you can only see the animation if you actually run the notebook cell.  In a future iteration, we are planning to implement an animated GIF generator for offline animations, but not this time.  Let's see what else we can do with these renderers.\n\nFirst, let's apply some transformations to images.  Already in the above border extension example as well as in the slicing animation, we have used ImgLib2's default behavior to apply transformations lazily, i.e. only when a 'pixel' is actually queried (e.g. to render it into a `RenderedImage` raster), the transformations are applied.  Transformations can be applied to both coordinates and values.  Lets apply some transformations to values:\n\nAnd now some integer coordinate transformations:\n\nWhile most trivial integer transformations such as flipping axes work on intervals, you probably noticed that we had to extend the image to infinity in order to shear it, so ImgLib2 can provide values for coordinates outside of the source interval.  For real coordinate transformations we will also need to interpolate values at non-integer coordinates.  Finally, in order to render the result, we have to read it from a raster.  Let's do this:\n\nAffine transformation are probably the most well known and simple real coordinate transformations, but there are many more.  Let's try a `ThinplateSplineTransform` and format text output with markdown:\n\n[![](https://img.shields.io/badge/Download%20-Python%20Notebook%20On%20Github-blue)](https://github.com/imglib/imglib2-www/tree/main/blog_posts/2022-09-14-how-to-display-imglib2-data)\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":{"source":"repo"},"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":false,"output-file":"2022-09-14-how-to-display-imglib2-data.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","theme":"cosmo","title-block-banner":true,"title":"How to display ImgLib2 data in a notebook","author":"Stephan Saalfeld","date":"2022-09-14","categories":["imglib2","jupyter","notebook"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}